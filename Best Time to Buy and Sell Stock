//You are given an array prices where prices[i] is the price of a given stock on the ith day.
//You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.
//Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

Approach 1 - Brute force
class Solution {
    public int maxProfit(int[] prices) {
        int buy,sell,max,profit;
        buy=sell=max=profit=0;
        int index=0;
        for(int i=0;i<prices.length-1;i++){
            buy=prices[index];
            sell=prices[i+1];
            profit=sell-buy;
            if(profit<0){
                index=i+1;
            }
            max=Math.max(max,profit);
        }
        return max;      
    }
}

Approach 2 - Dynamic Programming (Kadanes Algorithm)
class Solution {
    public int maxProfit(int[] prices) {
        int curr_max=0;
        int max_so_far=0;
        for(int i=1;i<prices.length;i++){
            curr_max=Math.max(0,curr_max+=prices[i]-prices[i-1]);
            max_so_far=Math.max(curr_max,max_so_far);
        }
        return max_so_far;
    }
}
